using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GraphEditor.GraphDeclaration;

namespace Plugin
{
    class Embeding : IEnumerable<Tuple<int, int>>
    {
        public SurfaceTypeEnum minimalEmbedebleSurface;
        public Dictionary<int, List<int>> neighbors;
        
        
        public Embeding(GraphDefinition sourceDefinition)
        {
            neighbors = new Dictionary<int, List<int>>();
            
            foreach (Edge edge in sourceDefinition.edges)
            {
                int first = sourceDefinition.vertices.IndexOf(edge.Begin as Vertex);
                int last = sourceDefinition.vertices.IndexOf(edge.End as Vertex);
                AddEdge(new Tuple<int, int>(first, last));
            }
        }

        public Embeding(Stack<Tuple<int, int>> stack, int u, int v)
        {
            //agreeOrientation = new List<bool>();
            neighbors = new Dictionary<int, List<int>>();            
            foreach (Tuple<int, int> pair in stack)
            {
                AddEdge(pair);
                if (pair.Item1 == u && pair.Item2 == v)
                {
                    break;
                }
            }            
        }

        public Embeding(Embeding embedding)
        {
            neighbors = new Dictionary<int, List<int>>();
            foreach (KeyValuePair<int, List<int>> v in embedding.neighbors)
            {
                List<int> l = new List<int>(v.Value);
                neighbors.Add(v.Key, l);
            }
        }

        public Embeding()
        {
            neighbors = new Dictionary<int, List<int>>();
        }

        public Embeding(List<int> cycle)
        {
            neighbors = new Dictionary<int, List<int>>();
            foreach (int i in cycle)
            {
                
            }
        }

        public Embeding(Tuple<int, int> edge)
        {
            neighbors = new Dictionary<int, List<int>>();
            AddEdge(edge);
        }

        internal static IEnumerable<Embeding> GetK5Embedings()
        {
            throw new NotImplementedException();
        }

        internal static IEnumerable<Embeding> GetK3_3Embedings()
        {
            throw new NotImplementedException();
        }

        internal bool IsK5()
        {
            throw new NotImplementedException();
            // wrong
            
            return neighbors.Count == 5;
        }

        internal bool IsK3_3()
        {
            //wrong
            throw new NotImplementedException();
            return neighbors.Count == 6;
        }


        //public void makeAsymmetric()
        //{
        //    for (int i = 0; i < neighbors.Count; i++)
        //    {
        //        for (int j = 0; j < neighbors[i].Count; j++)
        //        {
        //            if (neighbors[j].Contains(i))
        //            {
        //                neighbors[j].Remove(i);
        //            }
        //        }
        //    }
        //}

        //internal void makeSymmetric()
        //{
        //    for (int i = 0; i < neighbors.Count; i++)
        //    {
        //        for (int j = 0; j < neighbors[i].Count; j++)
        //        {
        //            if (neighbors[j].Contains(i))
        //            {
        //                if (!neighbors[i].Contains(j))
        //                {
        //                    neighbors[i].Add(j);
        //                }
        //            }
        //        }
        //    }
        //}
                

        internal void AddPath(List<int> bisectingPath, VertexState vertexStateFirst, VertexState vertexStateSeccond)
        {
            switch (vertexStateFirst)
            {
                case VertexState.ORRIGINAL:

                    break;
                case VertexState.COPPY:

                    break;
            }

            switch (vertexStateSeccond)
            {
                case VertexState.ORRIGINAL:

                    break;
                case VertexState.COPPY:

                    break;
            }
        }

        internal void RemovePath(List<int> bisectingPath, VertexState vertexStateFirst, VertexState vertexStateSeccond)
        {
            throw new NotImplementedException();
        }

        public IEnumerator<Tuple<int, int>> GetEnumerator()
        {
            throw new NotImplementedException();
        }

        internal void RemoveEdge(Tuple<int, int> edge)
        {
            neighbors[edge.Item1].Remove(edge.Item2);
            neighbors[edge.Item2].Remove(edge.Item1);
            if (neighbors[edge.Item1].Count == 0)
            {
                neighbors.Remove(edge.Item1);
            }
            if (neighbors[edge.Item2].Count == 0)
            {
                neighbors.Remove(edge.Item1);
            }
        }

        internal void AddEdge(Tuple<int, int> edge)
        {
            if(!neighbors.ContainsKey(edge.Item1))
            {
                neighbors.Add(edge.Item1,new List<int>());
            }
            if (!neighbors.ContainsKey(edge.Item2))
            {
                neighbors.Add(edge.Item2, new List<int>());
            }
            neighbors[edge.Item1].Add(edge.Item2);
            neighbors[edge.Item2].Add(edge.Item1);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }


        internal void Minus(Embeding h)
        {
            
            foreach (Tuple<int, int> edge in h)
            {
                RemoveEdge(edge);
            }
            foreach (int u in h.neighbors.Keys)
            {
                foreach (int v in neighbors[u])
                {
                    if (u < v)
                    {
                        RemoveEdge(new Tuple<int, int>(u, v));
                    }
                }
            }
            
        }

        internal bool isEmpty()
        {
            return neighbors.Keys.Count == 0;
        }

        internal bool ConteintsVertex(int vertex)
        {
            return neighbors.ContainsKey(vertex);
        }

        internal void AddPath(List<int> path, List<int> face)
        {
            int start = path[0];
            int end = path[path.Count - 1];
            int indexStart = face.IndexOf(start);
            int beforeStart = (face[(indexStart - 1 + face.Count) % face.Count]);
            int afterStart = (face[(indexStart + 1) % face.Count]);
            int indexEnd = face.IndexOf(end);
            int beforeEnd = (face[(indexEnd - 1 + face.Count) % face.Count]);
            int afterEnd = (face[(indexEnd + 1) % face.Count]);
            int n = neighbors[start].Count;
            for (int i = 0; i < n-1; i++)
            {
                if (neighbors[start][i] == beforeStart && neighbors[start][i+1] == afterStart)
                {
                    neighbors[start].Insert(i + 1, path[1]);
                    neighbors.Add(path[1],new List<int>());
                    neighbors[path[1]].Add(start);
                    break;
                }
                if (neighbors[start][i] == afterStart && neighbors[start][i + 1] == beforeStart)
                {
                    neighbors[start].Insert(i + 1, path[1]);
                    neighbors.Add(path[1], new List<int>());
                    neighbors[path[1]].Add(start);
                    break;
                }
            }
            for (int i = 0; i < n - 1; i++)
            {
                if (neighbors[end][i] == beforeEnd && neighbors[end][i + 1] == afterEnd)
                {
                    neighbors[end].Insert(i + 1, path[path.Count - 2]);
                    neighbors.Add(path[path.Count - 2], new List<int>());
                    neighbors[path[path.Count - 2]].Add(end);
                    break;
                }
                if (neighbors[end][i] == afterEnd && neighbors[end][i + 1] == beforeEnd)
                {
                    neighbors[end].Insert(i + 1, path[path.Count - 2]);
                    neighbors.Add(path[path.Count - 2], new List<int>());
                    neighbors[path[path.Count - 2]].Add(end);
                    break;
                }
            }
            if (beforeEnd == 0 && afterEnd != 1)
            {
                neighbors[end].Insert(0, path[path.Count - 2]);
                neighbors.Add(path[path.Count - 2], new List<int>());
                neighbors[path[path.Count - 2]].Add(end);
            }
            if (beforeStart == 0 && afterStart != 1)
            {
                neighbors[start].Insert(0, path[1]);
                neighbors.Add(path[1], new List<int>());
                neighbors[path[1]].Add(start);
            }
            for (int i = 1; i < path.Count - 2; i++)
            {
                AddEdge(new Tuple<int, int>(path[i], path[i + 1]));
            }
        }

        internal void RemovePath(List<int> path)
        {
            for (int i = 0; i < path.Count - 1; i++)
            {
                RemoveEdge(new Tuple<int, int>(path[i], path[i + 1]));
            }
        }
    }
}