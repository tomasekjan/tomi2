using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GraphEditor.GraphDeclaration;

namespace Plugin
{
    class Embeding
    {
        public SurfaceTypeEnum surface;
        public int VertexCount
        {
            get
            {
                return neighbors.Count;
            }
        }
        public int edgeCount;
        public int EdgeCount
        {
            get
            {
                return edgeCount;
            }
        }
        
        public List<bool> agreeOrientation;
        public List<List<int>> neighbors;
        


        public Embeding(GraphDefinition sourceDefinition)
        {
            agreeOrientation = new List<bool>();
            neighbors = new List<List<int>>();
            int i = 0;
            foreach (Vertex vertice in sourceDefinition.vertices)
            {
                agreeOrientation.Add(true);
                neighbors.Add(new List<int>());                
                i = i + 1;
            }
            edgeCount = sourceDefinition.edges.Count;
            foreach (Edge edge in sourceDefinition.edges)
            {
                int first = sourceDefinition.vertices.IndexOf(edge.Begin as Vertex);
                int last = sourceDefinition.vertices.IndexOf(edge.End as Vertex);
                neighbors[first].Add(last);
                neighbors[last].Add(first);
            }
            surface = sourceDefinition.suraceType;
        }

        public Embeding(Stack<Tuple<int, int>> stack)
        {
            agreeOrientation = new List<bool>();
            neighbors = new List<List<int>>();
            Dictionary<int, int> names = new Dictionary<int, int>();
            foreach (Tuple<int, int> pair in stack)
            {
                int uName = pair.Item1;
                int vName = pair.Item2;

                
                if (! names.ContainsKey(uName))
                {
                    names.Add(uName, names.Count);
                    neighbors.Add(new List<int>());
                }

                if (!names.ContainsKey(vName))
                {
                    names.Add(vName, names.Count);
                    neighbors.Add(new List<int>());
                }
                
                int u = names[uName];
                int v = names[vName];

                neighbors[u].Add(v);
                neighbors[v].Add(u);
            }
        }

        public void makeAsymmetric()
        {
            for (int i = 0; i < neighbors.Count; i++)
            {
                for (int j = 0; j < neighbors[i].Count; j++)
                {
                    if (neighbors[j].Contains(i))
                    {
                        neighbors[j].Remove(i);
                    }
                }
            }
        }

        public static Embeding Union(Embeding a, Embeding b)
        {
            // TODO implement
            // just for geting obstruction
            throw new NotImplementedException();
        }



        internal IEnumerable<Embeding> getAllEmbedings()
        {
            throw new NotImplementedException();
        }
    }
    
}
