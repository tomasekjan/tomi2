using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AddInView;
using GraphEditor.GraphDeclaration;
using System.Diagnostics;
using System.Drawing;
//using Plugin.EmbeddingPlugin;
using System.Collections;

namespace Plugin
{
    public partial class GraphEmbeddingPolynom : IPozitioning
    {
        public override GraphDefinition Pozitioning(GraphDefinition sourceDefinition)
        {
            Embeding embeding = ConvertToEmbeding(sourceDefinition);
            switch (sourceDefinition.suraceType)
            {
                case SurfaceTypeEnum.Sphere:
                    return PozitioningSphere(embeding);
                case SurfaceTypeEnum.Torus:
                    return PozitioningTorus(embeding);
                default:
                    throw new ArgumentException();
            }
        }

        private GraphDefinition PozitioningSphere(Embeding embeding)
        {
            //TODO use ComponentGetter first GetSphereEmbeding needs 2- connected components only
            embeding = GetSphereEmbeding(embeding);

            return null;
        }

        private GraphDefinition PozitioningTorus(Embeding embeding)
        {
            embeding = GetTorusEmbeding(embeding);
            //TODO embeding 2 positioning
            return null;
        }

        private Embeding ConvertToEmbeding(GraphDefinition sourceDefinition)
        {
            return new Embeding(sourceDefinition);
        }

        private Embeding GetTorusEmbeding(Embeding sourceDefinition)
        {
            List<Embeding> components = Get2ConnectedComponents(sourceDefinition);
            List<Embeding> nonPlanarComponents = new List<Embeding>();

            int p = components.Count;
            int s = 0; //nonPlanaComponentsCount
            int t = -1;
            for (int i = 0; i < p; i++)
            {
                if (!IsPlanar(components[i]))
                {
                    s++;
                    t = i;
                    nonPlanarComponents.Add(components[i]);
                }
            }
            if (s == 0)
            {
                return GetSphereEmbeding(sourceDefinition);
            }
            if (s > 2)
            {
                //can not find embeding
                return null;
                //return Embeding.Union(nonPlanarComponents[1], nonPlanarComponents[0]);
            }
            Embeding q = nonPlanarComponents[0];
            List<Embeding> components3Connected = Get3ConnectedComponents(q);
            int nonPlanarCount = 0;
            Embeding nonPlanarComponent = null;
            foreach (Embeding embeding in components3Connected)
            {
                if (!IsPlanar(embeding))
                {
                    nonPlanarCount++;
                    nonPlanarComponent = embeding;
                }
            }
            Debug.Assert(nonPlanarCount > 0);

            if (nonPlanarCount > 1)
            {
                return SeparanleEmneding(sourceDefinition);
            }

            Embeding partialEmbeding = null;
            if (!isProjectivePlanar(nonPlanarComponent))
            {
                partialEmbeding = GetProjectiveEmbeding(nonPlanarComponent);
                if (CountFaceWidth(nonPlanarComponent, partialEmbeding) > 4)
                {
                    //can not find embeding
                    return null;
                }
            }
            else
            {
                Embeding obstruction = GetProjectiveEmbedingObstruction(nonPlanarComponent);
                foreach (Embeding embeding in obstruction.getAllEmbedings())
                {
                    partialEmbeding = ExtendEmbeding(sourceDefinition, obstruction);
                }
                if (partialEmbeding == null)
                {
                    return null;
                }

            }
            return combinate(partialEmbeding, components3Connected, components);

        }

        private Embeding combinate(Embeding partialEmbeding, List<Embeding> components3Connected, List<Embeding> components)
        {
            throw new NotImplementedException();
        }

        private Embeding ExtendEmbeding(Embeding sourceDefinition, Embeding obstruction)
        {
            throw new NotImplementedException();
        }

        private Embeding GetProjectiveEmbedingObstruction(Embeding nonPlanarComponent)
        {
            throw new NotImplementedException();
        }

        private int CountFaceWidth(Embeding nonPlanarComponent, Embeding partialEmbeding)
        {
            throw new NotImplementedException();
        }

        private Embeding GetProjectiveEmbeding(Embeding nonPlanarComponent)
        {
            throw new NotImplementedException();
        }

        private bool isProjectivePlanar(Embeding nonPlanarComponent)
        {
            throw new NotImplementedException();
        }

        private Embeding SeparanleEmneding(Embeding sourceDefinition)
        {
            throw new NotImplementedException();
        }

        private List<Embeding> Get3ConnectedComponents(Embeding embeding)
        {
            ThereConnectedComponentGetter componentGetter = new ThereConnectedComponentGetter(embeding);
            return componentGetter.GetComponents();
        }

        private Embeding GetSphereEmbeding(Embeding embeding)
        {
            SphereEmbeder sphereEmbeder = new SphereEmbeder(embeding);

            return null;
        }

        private Embeding GetKuratiwskiSubGraf(Embeding graphDefinition)
        {
            // TODO changeThis.
            // Just debuging value.
            return graphDefinition;
        }

        private bool IsPlanar(Embeding graphDefinition)
        {
            throw new NotImplementedException();
        }

        private List<Embeding> Get2ConnectedComponents(Embeding embeding)
        {
            TwoConnectedComponentGetter componentGeter = new TwoConnectedComponentGetter(embeding);
            return componentGeter.GetComponents();
        }        
    }
}
