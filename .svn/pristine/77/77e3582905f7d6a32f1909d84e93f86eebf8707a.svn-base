using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AddInView;
using GraphEditor.GraphDeclaration;
using System.Diagnostics;
using System.Drawing;
using System.Collections;

namespace Plugin
{
    public class EmbeddingException : Exception
    {
        /// <summary>
        /// Initializes a new instance of the EmbeddingException class.
        /// </summary>
        public EmbeddingException(string error):base (error)
        {
            
        }
    }
    public class GraphEmbeddingExponentioal : IPozitioning
    {

        public override GraphDefinition Pozitioning(GraphDefinition sourceDefinition)
        {
            Embeding embeding = new Embeding(sourceDefinition);
            switch (sourceDefinition.suraceType)
            {
                case SurfaceTypeEnum.Sphere:
                    return GetSpherePozitioning(embeding);
                case SurfaceTypeEnum.Torus:
                    return GetTorusPozitioning(embeding);
                default:
                    throw new ArgumentException();
            }
        }

        private GraphDefinition GetTorusPozitioning(Embeding embeding)
        {
            embeding = GetTorusEmbeding(embeding);
            
            return null;
        }

        private Embeding GetTorusEmbeding(Embeding embeding)
        {
            Embeding sphereEmbeding = GetSphereEmbeding(embeding);
            if (sphereEmbeding != null)
            {
                // planar embedding is also torus embeding
                return sphereEmbeding;
            }
            Embeding h = SubgrafHomoomorphicToK5K3_3(embeding);
            if (h.IsK5())
            {
                foreach (Embeding e in Embeding.GetK5Embedings())
                {
                    ExtedEmgeddingTorus(embeding, h);
                }
            }
            if (h.IsK3_3())
            {
                foreach (Embeding e in Embeding.GetK3_3Embedings())
                {

                }
            }
            throw new EmbeddingException("there schould be k5 or k3_3");
        }

        private void ExtedEmgeddingTorus(Embeding g, Embeding h)
        {
            Dictionary<Tuple<int, int>, bool> record = new Dictionary<Tuple<int, int>, bool>();
            foreach (Tuple<int, int> edge in h)
            {

            }
        }        

        private Embeding SubgrafHomoomorphicToK5K3_3(Embeding embeding)
        {
            Embeding h = new Embeding(embeding);
            h.makeAsymmetric();
            foreach (Tuple<int, int> edge in h)
            {                
                h.RemoveEdge(edge);
                if (GetSphereEmbeding(h) != null)
                {
                    h.AddEdge(edge);
                } 
            }
            h.makeSymmetric();
            return h;
        }

        private GraphDefinition GetSpherePozitioning(Embeding embeding)
        {
            embeding = GetSphereEmbeding(embeding);

            return null;
        }

        //returns null if not planar
        private Embeding GetSphereEmbeding(Embeding embeding)
        {
            throw new NotImplementedException();
        }        
    }
}
